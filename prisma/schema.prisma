generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  SUPER_ADMIN
  CUSTOMER
}

enum TaxMode {
  PERCENTAGE
  FIXED
  HYBRID
}

enum InvestBucket {
  MUTUAL_FUND
  IND_STOCK
  US_STOCK
  CRYPTO
  EMERGENCY_FUND
}

enum ExpenseType {
  EXPECTED
  UNEXPECTED
}

enum SpendCategory {
  NEEDS
  PARTIAL_NEEDS
  AVOID
}

enum SIPFrequency {
  MONTHLY
  YEARLY
  CUSTOM
}

enum LoanType {
  HOME_LOAN
  CAR_LOAN
  PERSONAL_LOAN
  EDUCATION_LOAN
  BUSINESS_LOAN
  GOLD_LOAN
  CREDIT_CARD
  OTHER
}

enum PaymentMethod {
  CASH
  CARD
  UPI
  NET_BANKING
  OTHER
}

model User {
  id                 String    @id @default(cuid())
  email              String    @unique
  hashedPassword     String
  name               String?
  image              String?
  phoneNumber        String?
  countryCode        String?   @default("+91")
  roles              Role[]    @default([CUSTOMER])
  isBlocked          Boolean   @default(false)
  emailVerified      Boolean   @default(false)
  verificationToken  String?   @unique
  verificationExpiry DateTime?
  recentlyAccessedAt DateTime?
  resetOtp           String?
  resetOtpExpiry     DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  profiles          Profile[]
  taxSettings       TaxSetting[]
  salaries          SalaryHistory[]
  incomes           Income[]
  allocations       InvestmentAllocation[]
  sips              SIP[]
  loans             Loan[]
  accounts          Account[]
  sessions          Session[]
  expenses          Expense[]
  holdings          Holding[]
  expenseBudget     ExpenseBudget?
  monthlySnapshots  MonthlySnapshot[]
  creditCards       CreditCard[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Profile {
  id          String   @id @default(cuid())
  userId      String
  displayName String?
  avatarUrl   String?
  phoneNumber String?
  dateOfBirth DateTime?
  address     String?
  city        String?
  state       String?
  country     String?
  postalCode  String?
  panNumber   String?  @unique
  aadharNumber String? @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profiles")
}

model SalaryHistory {
  id            String   @id @default(cuid())
  userId        String
  monthly       Decimal  @db.Decimal(12, 2)
  effectiveFrom DateTime
  effectiveTo   DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("net_salary_history")
}

model Income {
  id          String   @id @default(cuid())
  userId      String
  date        DateTime
  title       String
  description String?
  amount      Decimal  @db.Decimal(12, 2)
  category    String   @default("OTHER") // FREELANCE, BONUS, GIFT, INVESTMENT_RETURN, REFUND, OTHER
  isRecurring Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("incomes")
}

model TaxSetting {
  id          String   @id @default(cuid())
  userId      String
  mode        TaxMode  @default(PERCENTAGE)
  percentage  Decimal? @db.Decimal(5, 2)
  fixedAmount Decimal? @db.Decimal(12, 2)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("tax_settings")
}

model Loan {
  id                  String    @id @default(cuid())
  userId              String
  loanType            LoanType
  institution         String
  principalAmount     Decimal   @db.Decimal(12, 2)
  interestRate        Decimal   @db.Decimal(5, 2)
  tenure              Int
  emiAmount           Decimal   @db.Decimal(12, 2)
  startDate           DateTime
  endDate             DateTime?
  currentOutstanding  Decimal   @db.Decimal(12, 2)
  accountNumber       String?
  description         String?
  currency            String    @default("INR")
  isActive            Boolean   @default(true)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  emis EMI[]
  user User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("loans")
}

model EMI {
  id            String    @id @default(cuid())
  loanId        String
  emiAmount     Decimal   @db.Decimal(12, 2)
  dueDate       DateTime
  paidDate      DateTime?
  principalPaid Decimal?  @db.Decimal(12, 2)
  interestPaid  Decimal?  @db.Decimal(12, 2)
  isPaid        Boolean   @default(false)
  lateFee       Decimal?  @db.Decimal(12, 2)
  receiptUrl    String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  loan Loan @relation(fields: [loanId], references: [id], onDelete: Cascade)

  @@map("emis")
}

model SIP {
  id          String        @id @default(cuid())
  userId      String
  name        String
  amount      Decimal       @db.Decimal(12, 2)
  frequency   SIPFrequency
  customDay   Int? // Day of month for custom SIPs (1-31)
  startDate   DateTime
  endDate     DateTime?
  isActive    Boolean       @default(true)
  description String?
  bucket      InvestBucket? // Investment bucket type (optional for backward compatibility)
  symbol      String? // Symbol/scheme code for the investment
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sips")
}

model InvestmentAllocation {
  id      String       @id @default(cuid())
  userId  String
  bucket  InvestBucket
  percent Decimal      @db.Decimal(5, 2)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, bucket])
  @@map("investment_allocations")
}

model Holding {
  id        String       @id @default(cuid())
  userId    String
  bucket    InvestBucket
  symbol    String
  name      String
  qty       Decimal      @db.Decimal(18, 6)
  avgCost   Decimal      @db.Decimal(12, 2)
  currentPrice Decimal?  @db.Decimal(12, 2)
  currency  String       @default("INR")
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("holdings")
}

model ExpenseBudget {
  id              String   @id @default(cuid())
  userId          String
  expectedPercent Decimal? @db.Decimal(5, 2)
  expectedAmount  Decimal? @db.Decimal(12, 2)
  unexpectedPercent Decimal? @db.Decimal(5, 2)
  unexpectedAmount  Decimal? @db.Decimal(12, 2)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
  @@map("expense_budgets")
}

model CreditCard {
  id              String   @id @default(cuid())
  userId          String
  cardName        String   // e.g., "HDFC Regalia", "Axis Vistara"
  lastFourDigits  String   // Last 4 digits for identification
  bank            String   // Bank name
  billingCycle    Int      // Day of month (1-31) when billing cycle closes
  cardNetwork     String?  // Visa, Mastercard, Amex, etc.
  cardLimit       Decimal? @db.Decimal(12, 2)
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  expenses Expense[]

  @@map("credit_cards")
}

model Expense {
  id            String        @id @default(cuid())
  userId        String
  date          DateTime
  title         String
  description   String?
  expenseType   ExpenseType
  category      SpendCategory
  amount        Decimal       @db.Decimal(12, 2)
  needsPortion  Decimal?      @db.Decimal(12, 2)
  avoidPortion  Decimal?      @db.Decimal(12, 2)
  paymentMethod PaymentMethod @default(CASH)
  creditCardId  String?       // Reference to credit card if payment method is CARD
  receiptUrl    String?
  tags          String[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  creditCard CreditCard?  @relation(fields: [creditCardId], references: [id], onDelete: SetNull)

  @@map("expenses")
}

model MonthlySnapshot {
  id                String   @id @default(cuid())
  userId            String
  month             Int      // 1-12
  year              Int

  // Salary & Deductions
  salary            Decimal  @db.Decimal(12, 2)
  taxAmount         Decimal  @db.Decimal(12, 2)
  afterTax          Decimal  @db.Decimal(12, 2)

  // Obligations
  totalLoans        Decimal  @db.Decimal(12, 2)
  totalSIPs         Decimal  @db.Decimal(12, 2)

  // Expenses
  totalExpenses     Decimal  @db.Decimal(12, 2)
  expectedExpenses  Decimal  @db.Decimal(12, 2)
  unexpectedExpenses Decimal @db.Decimal(12, 2)
  needsExpenses     Decimal  @db.Decimal(12, 2)
  avoidExpenses     Decimal  @db.Decimal(12, 2)

  // Surplus Calculation
  availableAmount   Decimal  @db.Decimal(12, 2) // afterTax - loans - SIPs
  spentAmount       Decimal  @db.Decimal(12, 2) // total expenses
  surplusAmount     Decimal  @db.Decimal(12, 2) // availableAmount - spentAmount

  // Carry Forward
  previousSurplus   Decimal  @db.Decimal(12, 2) // Surplus from previous month

  // Investments Made
  investmentsMade   Decimal? @db.Decimal(12, 2)

  // Status
  isClosed          Boolean  @default(false) // Whether month is closed
  closedAt          DateTime?

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, year, month])
  @@map("monthly_snapshots")
}