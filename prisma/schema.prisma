generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  SUPER_ADMIN
  CUSTOMER
}

enum TaxMode {
  PERCENTAGE
  FIXED
  HYBRID
}

enum InvestBucket {
  MUTUAL_FUND
  IND_STOCK
  US_STOCK
  CRYPTO
  EMERGENCY_FUND
}

enum ExpenseType {
  EXPECTED
  UNEXPECTED
}

enum SpendCategory {
  NEEDS
  PARTIAL_NEEDS
  AVOID
}

enum SIPFrequency {
  MONTHLY
  YEARLY
  CUSTOM
}

enum LoanType {
  HOME_LOAN
  CAR_LOAN
  PERSONAL_LOAN
  EDUCATION_LOAN
  BUSINESS_LOAN
  GOLD_LOAN
  CREDIT_CARD
  OTHER
}

model User {
  id             String   @id @default(cuid())
  email          String   @unique
  hashedPassword String
  name           String?
  image          String?
  role           Role     @default(CUSTOMER)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  profiles      Profile[]
  taxSettings   TaxSetting[]
  salaries      NetSalaryHistory[]
  allocations   InvestmentAllocation[]
  sips          SIP[]
  loans         Loan[]
  accounts      Account[]
  sessions      Session[]
  expenses      Expense[]
  holdings      Holding[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Profile {
  id          String   @id @default(cuid())
  userId      String
  displayName String?
  avatarUrl   String?
  phoneNumber String?
  dateOfBirth DateTime?
  address     String?
  city        String?
  state       String?
  country     String?
  postalCode  String?
  panNumber   String?  @unique
  aadharNumber String? @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profiles")
}

model NetSalaryHistory {
  id            String   @id @default(cuid())
  userId        String
  netMonthly    Decimal  @db.Decimal(12, 2)
  effectiveFrom DateTime
  effectiveTo   DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("net_salary_history")
}

model TaxSetting {
  id          String   @id @default(cuid())
  userId      String
  mode        TaxMode  @default(PERCENTAGE)
  percentage  Decimal? @db.Decimal(5, 2)
  fixedAmount Decimal? @db.Decimal(12, 2)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("tax_settings")
}

model Loan {
  id                  String    @id @default(cuid())
  userId              String
  loanType            LoanType
  institution         String
  principalAmount     Decimal   @db.Decimal(12, 2)
  interestRate        Decimal   @db.Decimal(5, 2)
  tenure              Int
  emiAmount           Decimal   @db.Decimal(12, 2)
  startDate           DateTime
  endDate             DateTime?
  currentOutstanding  Decimal   @db.Decimal(12, 2)
  accountNumber       String?
  description         String?
  currency            String    @default("INR")
  isActive            Boolean   @default(true)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  emis EMI[]
  user User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("loans")
}

model EMI {
  id            String    @id @default(cuid())
  loanId        String
  emiAmount     Decimal   @db.Decimal(12, 2)
  dueDate       DateTime
  paidDate      DateTime?
  principalPaid Decimal?  @db.Decimal(12, 2)
  interestPaid  Decimal?  @db.Decimal(12, 2)
  isPaid        Boolean   @default(false)
  lateFee       Decimal?  @db.Decimal(12, 2)
  receiptUrl    String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  loan Loan @relation(fields: [loanId], references: [id], onDelete: Cascade)

  @@map("emis")
}

model SIP {
  id          String       @id @default(cuid())
  userId      String
  name        String
  amount      Decimal      @db.Decimal(12, 2)
  frequency   SIPFrequency
  customDay   Int? // Day of month for custom SIPs (1-31)
  startDate   DateTime
  endDate     DateTime?
  isActive    Boolean      @default(true)
  description String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sips")
}

model InvestmentAllocation {
  id      String       @id @default(cuid())
  userId  String
  bucket  InvestBucket
  percent Decimal      @db.Decimal(5, 2)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, bucket])
  @@map("investment_allocations")
}

model Holding {
  id        String       @id @default(cuid())
  userId    String
  bucket    InvestBucket
  symbol    String
  name      String
  qty       Decimal      @db.Decimal(18, 6)
  avgCost   Decimal      @db.Decimal(12, 2)
  currentPrice Decimal?  @db.Decimal(12, 2)
  currency  String       @default("INR")
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("holdings")
}

model Expense {
  id           String        @id @default(cuid())
  userId       String
  date         DateTime
  title        String
  description  String?
  expenseType  ExpenseType
  category     SpendCategory
  amount       Decimal       @db.Decimal(12, 2)
  needsPortion Decimal?      @db.Decimal(12, 2)
  avoidPortion Decimal?      @db.Decimal(12, 2)
  paymentMethod String?
  receiptUrl   String?
  tags         String[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("expenses")
}